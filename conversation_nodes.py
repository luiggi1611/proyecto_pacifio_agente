import openai
import re
from typing import List, Dict, Any
from models import GraphState, ConversationStep, BusinessInfo, Valuation
from certificate_analyzer import CertificateAnalyzer
from valuation_engine import ValuationEngine
from policy_generator import PolicyGenerator

class ConversationNodes:
    """Nodos del grafo de conversaci√≥n para el agente de seguros"""
    
    def __init__(self, api_key: str):
        self.client = openai.OpenAI(api_key=api_key)
        self.certificate_analyzer = CertificateAnalyzer(api_key)
        self.valuation_engine = ValuationEngine()
        self.policy_generator = PolicyGenerator()
    
    def welcome_node(self, state: GraphState) -> GraphState:
        """Nodo de bienvenida inicial"""
        if not state["messages"]:
            welcome_message = {
                "role": "assistant",
                "content": """¬°Hola! üëã Soy tu agente de seguros comerciales de Seguros Pac√≠fico.

Estoy aqu√≠ para ayudarte a crear una p√≥liza personalizada para tu negocio. Mi objetivo es proteger tu inversi√≥n con la cobertura m√°s adecuada.

Para comenzar, puedo trabajar con:
üìÑ **Certificados de funcionamiento** (PDF/Word/TXT)
üì∏ **Fotos del certificado** de funcionamiento  
üì∑ **Fotos de tu local** comercial
üí¨ **Informaci√≥n que me proporciones** directamente

¬øPodr√≠as empezar comparti√©ndome el certificado de funcionamiento o cont√°ndome sobre tu negocio? 

Por ejemplo: "Tengo una panader√≠a de 50m¬≤" o sube una foto/documento."""
            }
            
            state["messages"].append(welcome_message)
            state["current_step"] = ConversationStep.GATHERING_INFO
            state["needs_certificate"] = True
            state["next_action"] = "wait_for_input"
        
        return state
    
    def analyze_input_node(self, state: GraphState) -> GraphState:
        """Analiza la entrada del usuario y determina la siguiente acci√≥n - CORREGIDO"""
        user_input = state["user_input"].lower()
        
        # Verificar si el usuario est√° confirmando proceder con valuaci√≥n
        if state.get("next_action") == "ready_for_valuation":
            confirmation_words = ["s√≠", "si", "ok", "correcto", "procede", "adelante", "calcular", "valuaci√≥n"]
            if any(word in user_input for word in confirmation_words):
                state["next_action"] = "calculate_valuation"
                response = "¬°Perfecto! Procediendo a calcular la valuaci√≥n de tu seguro..."
                state["messages"].append({
                    "role": "assistant", 
                    "content": response
                })
                return state
            elif any(word in user_input for word in ["no", "espera", "todav√≠a", "aun"]):
                response = "Entendido. ¬øQu√© informaci√≥n necesitas aclarar antes de proceder con la valuaci√≥n?"
                state["messages"].append({
                    "role": "assistant",
                    "content": response
                })
                state["next_action"] = "gather_info"
                return state
        
        # Extraer informaci√≥n b√°sica del mensaje
        extracted_info = self._extract_info_from_text(state["user_input"])
        
        # Actualizar business_info con informaci√≥n extra√≠da
        if extracted_info:
            for key, value in extracted_info.items():
                if value and not getattr(state["business_info"], key, None):
                    setattr(state["business_info"], key, value)
        
        # Determinar siguiente acci√≥n basada en lo que tenemos
        missing_info = self._identify_missing_info(state["business_info"])
        
        if missing_info:
            state["next_action"] = "gather_info"
            response = self._generate_info_request(missing_info, state["business_info"])
            
        elif state["business_info"].metraje and state["local_photos"]:
            # Si tenemos metraje Y fotos, preguntar antes de calcular
            state["next_action"] = "ready_for_valuation"
            response = f"""¬°Excelente! Ya tengo toda la informaci√≥n necesaria:

    ‚Ä¢ **Negocio:** {state["business_info"].tipo_negocio or 'Comercial'}
    ‚Ä¢ **√Årea:** {state["business_info"].metraje}m¬≤
    ‚Ä¢ **Direcci√≥n:** {state["business_info"].direccion or 'Registrada'}
    ‚Ä¢ **Fotos:** {len(state["local_photos"])} imagen(es) del local

    ¬øProcedo a calcular la valuaci√≥n de tu seguro comercial?"""
            
        elif state["business_info"].metraje and not state["local_photos"]:
            state["next_action"] = "request_photos"
            response = f"""Excelente, ya tengo la informaci√≥n b√°sica de tu {state["business_info"].tipo_negocio or 'negocio'} de {state["business_info"].metraje}m¬≤.

    üì∏ **Ahora necesito fotos de tu local** para hacer una valuaci√≥n precisa. Por favor sube fotos que muestren:
    ‚Ä¢ Vista general del interior
    ‚Ä¢ Inventario/mercanc√≠a
    ‚Ä¢ Mobiliario y equipos
    ‚Ä¢ Fachada del local

    Esto me permitir√° calcular el valor exacto para tu seguro."""
            
        else:
            state["next_action"] = "gather_info"
            response = self._generate_follow_up_question(state["business_info"])
        
        state["messages"].append({
            "role": "assistant",
            "content": response
        })
        
        return state
    
    def certificate_analysis_node(self, state: GraphState) -> GraphState:
        """Analiza certificados de funcionamiento"""
        if state["certificate_text"]:
            # Analizar documento de texto
            business_info = self.certificate_analyzer.analyze_document(state["certificate_text"])
        elif state["certificate_images"]:
            # Analizar imagen del certificado
            # Convertir SerializableImage a PIL Image
            cert_image = state["certificate_images"][0].to_pil_image()
            business_info = self.certificate_analyzer.analyze_image(cert_image)
        else:
            return state
        
        # Actualizar informaci√≥n del negocio
        state["business_info"] = self._merge_business_info(state["business_info"], business_info)
        state["current_step"] = ConversationStep.ANALYZING_CERTIFICATE
        
        # Generar resumen del an√°lisis
        summary = self._generate_certificate_analysis_summary(business_info)
        
        state["messages"].append({
            "role": "assistant",
            "content": summary
        })
        
        # Determinar siguiente paso
        if state["business_info"].metraje:
            state["next_action"] = "request_photos"
        else:
            state["next_action"] = "request_metraje"
        
        return state
    
    def valuation_node(self, state: GraphState) -> GraphState:
        """Calcula la valuaci√≥n del negocio - CON GUARD PARA EVITAR EJECUCI√ìN M√öLTIPLE"""
        
        # GUARD: Si ya tiene valuaci√≥n y est√° esperando confirmaci√≥n, no recalcular
        if state.get("valuation") and state.get("needs_confirmation"):
            print("[DEBUG] Valuaci√≥n ya existe y esperando confirmaci√≥n, no recalcular")
            return state
        
        # GUARD: Si no tiene metraje, no puede calcular
        if not state["business_info"].metraje:
            state["messages"].append({
                "role": "assistant",
                "content": "No puedo calcular la valuaci√≥n sin el metraje del local. ¬øPodr√≠as proporcion√°rmelo?"
            })
            state["next_action"] = "gather_info"
            return state
        
        print("[DEBUG] Calculando valuaci√≥n...")
        
        # Calcular valuaci√≥n
        photos_count = len(state["local_photos"]) if state["local_photos"] else 0
        valuation = self.valuation_engine.estimate_property_value(
            state["business_info"], 
            photos_count
        )
        
        state["valuation"] = valuation
        state["current_step"] = ConversationStep.VALUATION_COMPLETE
        
        # Generar cotizaci√≥n
        quote_summary = self.policy_generator.generate_quote_summary(
            state["business_info"], 
            valuation
        )
        
        state["messages"].append({
            "role": "assistant",
            "content": quote_summary
        })
        
        # IMPORTANTE: Establecer flags correctamente
        state["next_action"] = "await_confirmation"
        state["needs_confirmation"] = True
        state["ready_for_policy"] = False  # No est√° listo hasta confirmar
        
        print("[DEBUG] Valuaci√≥n completada, esperando confirmaci√≥n")
        
        return state

    def policy_generation_node(self, state: GraphState) -> GraphState:
        """Genera la p√≥liza de seguro - CON GUARD PARA EVITAR EJECUCI√ìN M√öLTIPLE"""
        
        # GUARD: Si ya tiene p√≥liza, no regenerar
        if state.get("policy"):
            print("[DEBUG] P√≥liza ya existe, no regenerar")
            return state
        
        # GUARD: Si no tiene valuaci√≥n, no puede generar p√≥liza
        if not state["valuation"]:
            print("[DEBUG] No hay valuaci√≥n, redirigiendo a calcular valuaci√≥n")
            state["next_action"] = "calculate_valuation"
            state["messages"].append({
                "role": "assistant",
                "content": "Necesito calcular la valuaci√≥n antes de generar la p√≥liza."
            })
            return state
        
        print("[DEBUG] Generando p√≥liza...")
        
        # Generar p√≥liza
        policy = self.policy_generator.generate_policy(
            state["business_info"],
            state["valuation"]
        )
        
        state["policy"] = policy
        state["current_step"] = ConversationStep.POLICY_GENERATED
        state["ready_for_policy"] = True
        state["needs_confirmation"] = False  # Ya no necesita confirmaci√≥n
        
        response = f"""{policy.content}

    ‚úÖ **¬°Tu p√≥liza ha sido generada exitosamente!**

    ¬øTe gustar√≠a que tambi√©n genere un resumen en audio de tu p√≥liza para que puedas escuchar los puntos m√°s importantes?"""
        
        state["messages"].append({
            "role": "assistant",
            "content": response
        })
        
        state["next_action"] = "offer_audio"
        
        print("[DEBUG] P√≥liza generada exitosamente")
        
        return state

    def audio_generation_node(self, state: GraphState) -> GraphState:
        """Genera el resumen en audio - CON GUARD PARA EVITAR EJECUCI√ìN M√öLTIPLE"""
        
        # GUARD: Si ya tiene audio, no regenerar
        if state.get("audio_file"):
            print("[DEBUG] Audio ya existe, no regenerar")
            return state
        
        # GUARD: Si no tiene p√≥liza, no puede generar audio
        if not state["policy"]:
            print("[DEBUG] No hay p√≥liza, no se puede generar audio")
            state["next_action"] = "generate_policy"
            state["messages"].append({
                "role": "assistant",
                "content": "Necesito que tengas una p√≥liza generada antes de crear el resumen en audio."
            })
            return state
        
        print("[DEBUG] Generando audio...")
        
        # Generar audio
        audio_file, summary_text = self.policy_generator.generate_audio_summary(
            state["business_info"],
            state["valuation"],
            state["policy"]
        )
        
        if audio_file:
            state["audio_file"] = audio_file
            state["audio_summary"] = summary_text
            state["current_step"] = ConversationStep.AUDIO_GENERATED
            
            response = """üîä **¬°Perfecto! He generado tu resumen en audio.**

    Tu p√≥liza est√° completamente lista. Tienes disponible:
    üìÑ **P√≥liza completa** en formato texto
    üîä **Resumen en audio** con los puntos principales

    ¬øHay algo m√°s en lo que pueda ayudarte? Por ejemplo:
    ‚Ä¢ Explicar alguna cobertura espec√≠fica
    ‚Ä¢ Ajustar alg√∫n valor de la p√≥liza
    ‚Ä¢ Informaci√≥n sobre el proceso de pago
    ‚Ä¢ Dudas sobre el procedimiento en caso de siniestro"""
        else:
            response = """‚úÖ **Tu p√≥liza est√° lista para descargar.**

    Hubo un problema generando el audio, pero tienes disponible la p√≥liza completa en formato texto.

    ¬øHay algo m√°s en lo que pueda ayudarte con tu seguro?"""
        
        state["messages"].append({
            "role": "assistant",
            "content": response
        })
        
        state["next_action"] = "complete"
        state["current_step"] = ConversationStep.COMPLETE
        
        print("[DEBUG] Audio generado exitosamente")
        
        return state

    def sales_assistance_node(self, state: GraphState) -> GraphState:
        """Nodo para asistencia adicional - CON GUARD PARA EVITAR BUCLES"""
        
        user_input = state["user_input"].lower()
        
        # GUARD: Evitar procesamiento si no hay input v√°lido
        if not user_input or user_input.strip() == "":
            print("[DEBUG] Input vac√≠o en sales_assistance, no procesar")
            return state
        
        # GUARD: Evitar bucles si ya se proces√≥ este input
        last_processed = state.get("last_processed_input", "")
        if user_input == last_processed:
            print(f"[DEBUG] Input '{user_input}' ya procesado, evitando bucle")
            return state
        
        print(f"[DEBUG] Procesando en sales_assistance: '{user_input[:30]}...'")
        
        # Marcar como procesado
        state["last_processed_input"] = user_input
        
        # Verificar el estado actual
        has_policy = bool(state.get("policy"))
        has_valuation = bool(state.get("valuation"))
        has_audio = bool(state.get("audio_file"))
        is_awaiting_confirmation = state.get("needs_confirmation", False)
        
        # Detectar tipos de consultas y responder seg√∫n el estado actual
        if any(word in user_input for word in ["cobertura", "cubre", "incluye", "protege", "explica"]):
            response = self._handle_coverage_questions_contextual(state, has_policy, is_awaiting_confirmation)
            
        elif any(word in user_input for word in ["precio", "costo", "prima", "pago", "cuanto"]):
            response = self._handle_pricing_questions_contextual(state, has_policy, is_awaiting_confirmation)
            
        elif any(word in user_input for word in ["contratar", "comprar", "adquirir", "firmar"]):
            response = self._handle_purchase_intent_contextual(state, has_policy, is_awaiting_confirmation)
            
        elif any(word in user_input for word in ["siniestro", "da√±o", "dano", "accidente", "reclamo"]):
            response = self._handle_claims_questions(state)
            
        elif any(word in user_input for word in ["documentos", "papeles", "requisitos", "necesito"]):
            response = self._handle_documents_questions(state, has_policy)
            
        else:
            response = self._generate_sales_response(user_input, state)
        
        # Si est√° esperando confirmaci√≥n para valuaci√≥n, agregar recordatorio
        if is_awaiting_confirmation and not has_policy:
            response += "\n\n---\nüí° **Recordatorio:** ¬øTe parece correcta la cotizaci√≥n? Si est√°s de acuerdo, responde 's√≠' para generar tu p√≥liza oficial."
        
        state["messages"].append({
            "role": "assistant",
            "content": response
        })
        
        # NO cambiar current_step ni next_action - mantener estado actual
        print(f"[DEBUG] sales_assistance completado")
        
        return state

    
    def _extract_info_from_text(self, text: str) -> Dict[str, Any]:
        """Extrae informaci√≥n del negocio del texto del usuario"""
        extracted = {}
        text_lower = text.lower()
        
        # Extraer metraje
        metraje_patterns = [
            r'(\d+\.?\d*)\s*m[¬≤2]',
            r'(\d+\.?\d*)\s*metros?\s*cuadrados?',
            r'(\d+\.?\d*)\s*m\s*cuadrados?'
        ]
        
        for pattern in metraje_patterns:
            match = re.search(pattern, text_lower)
            if match:
                try:
                    extracted['metraje'] = float(match.group(1))
                    break
                except:
                    continue
        
        # Extraer tipo de negocio
        business_types = {
            "restaurante": ["restaurante", "restaurant", "comida", "cocina", "cevicher√≠a"],
            "tienda": ["tienda", "store", "comercio", "venta", "bodega", "minimarket"],
            "oficina": ["oficina", "office", "administrativa", "servicios"],
            "farmacia": ["farmacia", "botica", "medicinas", "droguer√≠a"],
            "bar": ["bar", "cantina", "licores", "discoteca", "pub"],
            "panader√≠a": ["panader√≠a", "bakery", "pan", "pasteler√≠a", "reposter√≠a"],
            "taller": ["taller", "mec√°nica", "reparaci√≥n", "automotriz"],
            "consultorio": ["consultorio", "cl√≠nica", "m√©dico", "dental", "veterinaria"],
            "salon": ["sal√≥n", "peluquer√≠a", "spa", "belleza", "est√©tica"]
        }
        
        for business_type, keywords in business_types.items():
            if any(keyword in text_lower for keyword in keywords):
                extracted['tipo_negocio'] = business_type
                break
        
        return extracted
    
    def _identify_missing_info(self, business_info: BusinessInfo) -> List[str]:
        """Identifica qu√© informaci√≥n falta"""
        missing = []
        
        if not business_info.metraje:
            missing.append("metraje")
        if not business_info.tipo_negocio:
            missing.append("tipo_negocio")
        if not business_info.direccion:
            missing.append("direccion")
        
        return missing
    
    def _generate_info_request(self, missing_info: List[str], business_info: BusinessInfo) -> str:
        """Genera solicitud de informaci√≥n faltante"""
        responses = {
            "metraje": "¬øCu√°ntos metros cuadrados tiene tu local?",
            "tipo_negocio": "¬øQu√© tipo de negocio tienes? (ej: restaurante, tienda, oficina)",
            "direccion": "¬øCu√°l es la direcci√≥n de tu negocio?"
        }
        
        if len(missing_info) == 1:
            return responses[missing_info[0]]
        else:
            requests = [responses[info] for info in missing_info[:2]]
            return f"Para cotizar tu seguro necesito: {' y '.join(requests)}"
    
    def _generate_follow_up_question(self, business_info: BusinessInfo) -> str:
        """Genera pregunta de seguimiento basada en la informaci√≥n actual"""
        if business_info.tipo_negocio and not business_info.metraje:
            return f"Perfecto, tienes un {business_info.tipo_negocio}. ¬øCu√°ntos metros cuadrados tiene?"
        elif business_info.metraje and not business_info.tipo_negocio:
            return f"Entiendo que tu local tiene {business_info.metraje}m¬≤. ¬øQu√© tipo de negocio es?"
        else:
            return "¬øPodr√≠as contarme m√°s detalles sobre tu negocio para poder cotizar tu seguro?"
    
    def _merge_business_info(self, existing: BusinessInfo, new: BusinessInfo) -> BusinessInfo:
        """Combina informaci√≥n de negocio existente con nueva"""
        merged_dict = existing.to_dict()
        
        for key, value in new.to_dict().items():
            if value and not merged_dict.get(key):
                merged_dict[key] = value
        
        return BusinessInfo.from_dict(merged_dict)
    
    def _generate_certificate_analysis_summary(self, business_info: BusinessInfo) -> str:
        """Genera resumen del an√°lisis del certificado"""
        summary = "üìÑ **He analizado tu certificado de funcionamiento:**\n\n"
        
        if business_info.nombre_cliente:
            summary += f"‚Ä¢ **Cliente:** {business_info.nombre_cliente}\n"
        if business_info.direccion:
            summary += f"‚Ä¢ **Direcci√≥n:** {business_info.direccion}\n"
        if business_info.tipo_negocio:
            summary += f"‚Ä¢ **Tipo de negocio:** {business_info.tipo_negocio}\n"
        if business_info.metraje:
            summary += f"‚Ä¢ **√Årea:** {business_info.metraje} m¬≤\n"
        if business_info.ruc:
            summary += f"‚Ä¢ **RUC:** {business_info.ruc}\n"
        
        if not business_info.metraje:
            summary += "\n‚ùì No pude encontrar el metraje exacto en el certificado. ¬øPodr√≠as decirme cu√°ntos metros cuadrados tiene tu local?"
        else:
            summary += "\nüì∏ **Siguiente paso:** Necesito fotos del local para hacer la valuaci√≥n precisa."
        
        return summary
    
    def _handle_pricing_questions(self, state: GraphState, has_policy: bool = False) -> str:
        """Maneja preguntas sobre precios - CORREGIDO"""
        if state["valuation"]:
            premium_annual = state["valuation"].total * 0.0056
            premium_monthly = premium_annual / 12
            
            if has_policy:
                # Si ya tiene p√≥liza, dar informaci√≥n m√°s espec√≠fica
                return f"""üí∞ **Informaci√≥n detallada de costos de tu p√≥liza activa:**

    **üí≥ Prima de tu seguro:**
    ‚Ä¢ **Prima anual:** S/ {premium_annual:,.2f}
    ‚Ä¢ **Prima mensual:** S/ {premium_monthly:,.2f}
    ‚Ä¢ **Prima diaria:** Solo S/ {premium_monthly/30:,.0f} soles

    **üìã Opciones de pago:**
    ‚Ä¢ **Anual:** S/ {premium_annual:,.2f} (sin recargo)
    ‚Ä¢ **Semestral:** S/ {premium_annual/2*1.02:,.2f} (2% recargo)
    ‚Ä¢ **Trimestral:** S/ {premium_annual/4*1.03:,.2f} por cuota (3% recargo)
    ‚Ä¢ **Mensual:** S/ {premium_monthly*1.05:,.2f} por cuota (5% recargo)

    **üí° Recomendaci√≥n:** El pago anual te ahorra hasta S/ {premium_annual*0.05:,.0f} en recargos.

    **üéØ Valor asegurado:** S/ {state["valuation"].total:,.2f}
    Esto significa que pagas solo el {(premium_annual/state["valuation"].total)*100:.2f}% del valor de tu negocio por protecci√≥n completa.

    ¬øTe gustar√≠a informaci√≥n sobre formas de pago o descuentos disponibles?"""
            else:
                # Si no tiene p√≥liza, usar respuesta original
                return f"""üí∞ **Informaci√≥n de costos de tu seguro:**

    ‚Ä¢ **Prima anual:** S/ {premium_annual:,.2f}
    ‚Ä¢ **Prima mensual:** S/ {premium_monthly:,.2f}
    ‚Ä¢ **Por d√≠a:** Solo S/ {premium_monthly/30:,.0f} soles

    **¬øSab√≠as que?** Por menos de lo que gastas en un caf√© al d√≠a, proteges completamente tu negocio.

    La prima se calcula sobre el valor total asegurado de S/ {state["valuation"].total:,.2f}, lo que representa una excelente protecci√≥n para tu inversi√≥n."""
        else:
            return "Para darte el precio exacto necesito calcular la valuaci√≥n de tu negocio. ¬øPodr√≠as proporcionarme el metraje y tipo de negocio?"

    def _handle_coverage_questions(self, state: GraphState, has_policy: bool = False) -> str:
        """Maneja preguntas sobre coberturas - CORREGIDO"""
        if has_policy:
            # Si ya tiene p√≥liza, dar informaci√≥n m√°s detallada y espec√≠fica
            return """üõ°Ô∏è **Coberturas ACTIVAS en tu p√≥liza:**

    **üî• INCENDIO Y EXPLOSI√ìN**
    ‚Ä¢ Da√±os por fuego, rayo, explosi√≥n
    ‚Ä¢ Gastos de extinci√≥n y salvamento
    ‚Ä¢ Da√±os por humo y calor
    ‚Ä¢ **Cobertura:** 100% suma asegurada

    **üö® ROBO Y HURTO**
    ‚Ä¢ Sustracci√≥n violenta o clandestina
    ‚Ä¢ Da√±os por intento de robo
    ‚Ä¢ Robo de dinero en efectivo (hasta S/ 2,000)
    ‚Ä¢ **Cobertura:** 100% suma asegurada

    **üíß DA√ëOS POR AGUA**
    ‚Ä¢ Filtraci√≥n, desborde, rotura de tuber√≠as
    ‚Ä¢ Da√±os por lluvia e inundaci√≥n
    ‚Ä¢ Rotura de tanques y cisternas
    ‚Ä¢ **Cobertura:** 100% suma asegurada

    **üå™Ô∏è FEN√ìMENOS NATURALES**
    ‚Ä¢ Terremoto, maremoto, huayco
    ‚Ä¢ Vientos huracanados
    ‚Ä¢ Granizo y avalanchas
    ‚Ä¢ **Deducible:** 5% del siniestro (m√≠n. S/ 1,000)

    **üë• RESPONSABILIDAD CIVIL**
    ‚Ä¢ Da√±os a terceros hasta S/ 100,000
    ‚Ä¢ Gastos de defensa legal
    ‚Ä¢ Da√±os por productos defectuosos
    ‚Ä¢ **Sin deducible**

    **üíº LUCRO CESANTE**
    ‚Ä¢ P√©rdida de ingresos hasta 6 meses
    ‚Ä¢ 60% de tus ingresos promedio
    ‚Ä¢ Gastos adicionales de funcionamiento
    ‚Ä¢ **Per√≠odo de espera:** 72 horas

    **üÜò SERVICIOS DE EMERGENCIA 24/7**
    ‚Ä¢ Cerrajer√≠a de emergencia
    ‚Ä¢ Plomer√≠a b√°sica
    ‚Ä¢ Limpieza post-siniestro
    ‚Ä¢ **Sin costo adicional**

    ¬øQuieres que te explique alguna cobertura en detalle?"""
        else:
            # Respuesta original si no tiene p√≥liza
            return """üõ°Ô∏è **Tu seguro incluye cobertura completa:**

    **üî• Incendio y Explosi√≥n**
    ‚Ä¢ Da√±os por fuego, rayo, explosi√≥n
    ‚Ä¢ Gastos de extinci√≥n y salvamento

    **üö® Robo y Hurto**
    ‚Ä¢ Sustracci√≥n violenta o clandestina
    ‚Ä¢ Da√±os por intento de robo

    **üíß Da√±os por Agua**
    ‚Ä¢ Filtraci√≥n, desborde, rotura de tuber√≠as
    ‚Ä¢ Da√±os por lluvia e inundaci√≥n

    **üåç Fen√≥menos Naturales**
    ‚Ä¢ Terremoto, maremoto, huayco
    ‚Ä¢ Vientos huracanados

    **üë• Responsabilidad Civil**
    ‚Ä¢ Da√±os a terceros hasta S/ 100,000
    ‚Ä¢ Gastos de defensa legal

    **üíº Lucro Cesante**
    ‚Ä¢ P√©rdida de ingresos hasta 6 meses
    ‚Ä¢ 60% de tus ingresos promedio

    ¬øTe interesa alguna cobertura en particular?"""

    def _handle_purchase_intent(self, state: GraphState, has_policy: bool = False) -> str:
        """Maneja intenci√≥n de compra - CORREGIDO"""
        if has_policy:
            return """üéâ **¬°Tu p√≥liza ya est√° lista y activa!**

    **üìã Pasos para activar tu seguro:**

    **‚úÖ COMPLETADO:**
    ‚Ä¢ An√°lisis de riesgo ‚úì
    ‚Ä¢ Valuaci√≥n personalizada ‚úì
    ‚Ä¢ Generaci√≥n de p√≥liza ‚úì

    **üìù PENDIENTE - Solo necesitas:**

    **1. üìÑ DOCUMENTACI√ìN**
    ‚Ä¢ Copia simple de RUC
    ‚Ä¢ Certificado de funcionamiento
    ‚Ä¢ Copia de DNI del representante legal

    **2. üí≥ ACTIVACI√ìN DEL SEGURO**
    ‚Ä¢ Primera cuota: S/ {(state['valuation'].total * 0.025 / 12 * 1.05):,.2f} (pago mensual)
    ‚Ä¢ O prima anual: S/ {(state['valuation'].total * 0.025):,.2f} (ahorro en recargos)

    **3. üè¢ CONTACTO PARA FINALIZAR:**
    ‚Ä¢ **WhatsApp:** +51 999-123-456 (env√≠a "QUIERO CONTRATAR P√ìLIZA")
    ‚Ä¢ **Email:** ventas@segurospacifico.com.pe
    ‚Ä¢ **Oficina:** Av. Larco 345, Miraflores
    ‚Ä¢ **C√≥digo de p√≥liza:** POL-{datetime.now().strftime('%Y%m%d')}-{state['business_info'].ruc or '000000'}

    **‚ö° ACTIVACI√ìN INMEDIATA:** Tu negocio estar√° protegido desde el momento del primer pago.

    **üéÅ BONUS:** Si contratas hoy, recibes 1 mes adicional de cobertura SIN COSTO.

    ¬øListo para activar tu protecci√≥n?"""
        else:
            return "Perfecto, primero necesito generar tu p√≥liza personalizada. ¬øTienes toda la informaci√≥n de tu negocio lista?"

    def _handle_documents_questions(self, state: GraphState, has_policy: bool = False) -> str:
        """NUEVO: Maneja preguntas sobre documentos"""
        if has_policy:
            return """üìÑ **Documentos necesarios para activar tu p√≥liza:**

    **üìã DOCUMENTOS OBLIGATORIOS:**
    ‚Ä¢ ‚úÖ **RUC:** Copia simple vigente
    ‚Ä¢ ‚úÖ **Certificado de funcionamiento:** El que ya analizaste
    ‚Ä¢ ‚úÖ **DNI:** Del representante legal

    **üìã DOCUMENTOS ADICIONALES (recomendados):**
    ‚Ä¢ üìÑ **Licencia municipal:** Si tienes
    ‚Ä¢ üì∏ **Fotos actuales:** Las que ya subiste est√°n bien
    ‚Ä¢ üè¢ **Contrato de alquiler:** Si el local es alquilado
    ‚Ä¢ üíº **Estados financieros:** Para mejor evaluaci√≥n

    **üì§ FORMAS DE ENV√çO:**
    ‚Ä¢ **Email:** documentos@segurospacifico.com.pe
    ‚Ä¢ **WhatsApp:** +51 999-123-456
    ‚Ä¢ **Presencial:** Av. Larco 345, Miraflores

    **‚è±Ô∏è TIEMPO DE PROCESAMIENTO:**
    ‚Ä¢ Documentos completos: 24 horas
    ‚Ä¢ Activaci√≥n inmediata con pago

    ¬øTienes todos los documentos listos?"""
        else:
            return "Una vez que tengas tu p√≥liza generada, te indicar√© exactamente qu√© documentos necesitas."
    def _generate_sales_response(self, user_input: str, state: GraphState) -> str:
        """Genera respuesta de ventas usando IA"""
        try:
            context = f"""
Estado actual: {state['current_step']}
Informaci√≥n del negocio: {state['business_info'].to_dict() if state['business_info'] else 'Ninguna'}
Valuaci√≥n: {state['valuation'].to_dict() if state.get('valuation') else 'No calculada'}
P√≥liza generada: {'S√≠' if state.get('policy') else 'No'}
"""
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": f"""Eres un agente de seguros comerciales amigable y persuasivo de Seguros Pac√≠fico. 
Tu objetivo es vender el seguro y resolver dudas. Mant√©n un tono conversacional y enf√≥cate en los beneficios.
Contexto actual: {context}
Responde de manera breve y directa, siempre orientado a cerrar la venta."""
                    },
                    {"role": "user", "content": user_input}
                ]
            )
            return response.choices[0].message.content
        except:
            return "Entiendo tu consulta. ¬øEn qu√© m√°s puedo ayudarte con tu seguro comercial?"